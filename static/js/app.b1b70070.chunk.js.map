{"version":3,"sources":["src/helpers/constants.js","src/helpers/i18n.js","src/components/SearchBar.js","src/helpers/address.js","src/components/Explorers.js","src/components/Balance/EthScanBalance.js","src/helpers/jsonRpc.js","src/components/Balance/rpc.js","src/components/Balance/ZkSyncBalance.js","src/components/Balance/Placeholder.js","src/components/Balance/index.js","src/components/GasFee.js","src/components/SupportUs.js","src/components/DefiBalances.js","src/views/Dashboard.js","src/hooks/useLocalStorage.js","src/routes/Root.js","App.js"],"names":["CHAIN_MAP","CHAIN_ETHEREUM","CHAIN_BSC","CHAIN_XDAI","L2_ZKSYNC","SUPPORT_CHAINS","Object","keys","i18n","values","title","credit","search","styles","StyleSheet","create","row","flex","flexDirection","SearchBar","chainIdx","onChangeChainIdx","onChangeSearchTerm","term","onSearch","View","style","minWidth","onChangeText","text","placeholder","value","isAddr","data","startsWith","length","isTx","AddrTx","chainId","chainExplorer","EXPLORER_MAP","isAddress","explorers","map","key","name","rounded","Content","Title","onPress","Linking","openURL","address","addr","tx","Chevron","Explorers","Divider","EthScanBalance","addresses","useEthscanBalance","nativeLoading","nativeBalance","useEthscanTokensBalance","tokenLoading","tokenBalance","balance","token","padEnd","baseFetchOptions","method","headers","jsonRpcFetch","fetch","node","body","then","response","json","idx","rpcTokens","JSON","stringify","jsonrpc","id","params","ZkSyncBalance","useState","setBalance","useEffect","a","async","nodeUrl","tokenJson","tokenMap","result","i","balances","committed","entries","forEach","sym","push","Number","decimals","toFixed","source","fetchZksyncBalance","Placeholder","Balance","includes","GasFee","gasStat","setGasStat","estimator","GAS_ESTIMATOR","GASNOW","api","processGasData","H","M","L","SupportUs","color","alignSelf","raised","type","iconSize","getNormalizedNumber","number","BN","dividedBy","pow","DefiBalances","isValidQuery","balanceOnProtocls","defiSdk","DeFiSDK","getNodeURL","getProtocolBalances","fetching","protocol","metadata","protocolBalances","position","Token","base","symbol","toString","underlying","asset","Component","Amount","Underlying","Subtitle","join","container","alignItems","backgroundColor","justifyContent","Root","initialValue","item","window","localStorage","getItem","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","useLocalStorage","width","useWindowDimensions","isDesktop","ScrollView","horizontal","App","group","webVersion","nodesVersion","contractsVersion","groupEnd"],"mappings":"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","file":"static/js/app.b1b70070.chunk.js","sourcesContent":["import {\n  CHAIN_ETHEREUM,\n  CHAIN_BSC,\n  CHAIN_XDAI,\n  // CHAIN_MATIC,\n  L2_ZKSYNC,\n} from 'staker-freenodes'\n\nexport const CHAIN_MAP = {\n  [CHAIN_ETHEREUM]: 'Ethereum',\n  [CHAIN_BSC]: 'BSC',\n  [CHAIN_XDAI]: 'xDai',\n  // [CHAIN_MATIC]: 'Polygon',\n  [L2_ZKSYNC]: 'ZkSync',\n}\n\nexport const SUPPORT_CHAINS = Object.keys(CHAIN_MAP)\nexport const CHAIN_NAME_LIST = Object.values(CHAIN_MAP)\n","export const i18n = {\n  en: {\n    title: 'Stakerwat.ch',\n    credit: 'Copyright 2021@Stakerwat.ch',\n    // Address or Transaction ID\n    search: 'Enter address',\n  },\n  props: [],\n}\n","import React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Button, ButtonGroup, Input } from 'react-native-elements'\nimport { CHAIN_NAME_LIST } from 'helpers/constants'\nimport { i18n } from 'helpers/i18n'\n\nconst styles = StyleSheet.create({\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n})\n\nexport const SearchBar = ({\n  chainIdx,\n  onChangeChainIdx,\n  onChangeSearchTerm,\n  onSearch,\n  term,\n}) => {\n  // flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\n  return (\n    <>\n      {/* <ButtonGroup\n        buttons={CHAIN_NAME_LIST}\n        onPress={onChangeChainIdx}\n        selectedIndex={chainIdx}\n      /> */}\n      <View style={[styles.row, { minWidth: 360 }]}>\n        <Input\n          onChangeText={(text) => onChangeSearchTerm(text)}\n          placeholder={i18n.en.search}\n          value={term}\n        />\n        {/* <Button title='Check' onPress={onSearch} /> */}\n      </View>\n    </>\n  )\n}\n\nexport default SearchBar\n","export const isAddr = (data) => data.startsWith('0x') && data.length === 42\n\nexport const isTx = (data) => data.startsWith('0x') && data.length === 66\n\nexport const checkAddr = (data) => [isAddr(data), isTx(data)]\n","import React from 'react'\nimport { Avatar, Card, ListItem } from 'react-native-elements'\nimport { Text, Linking } from 'react-native'\nimport { checkAddr } from 'helpers/address'\nimport { H3 } from '@expo/html-elements'\nimport { EXPLORER_MAP } from 'staker-freenodes'\n\nconst AddrTx = ({ term, chainId }) => {\n  const chainExplorer = EXPLORER_MAP[chainId]\n  if (!chainExplorer) return <H3>Explorer Not found</H3>\n\n  const [isAddress, isTx] = checkAddr(term)\n  if (isAddress) {\n    const explorers = Object.keys(chainExplorer)\n    return (\n      <>\n        {explorers &&\n          explorers.map((key) => (\n            <ListItem key={chainExplorer[key].name}>\n              <Avatar rounded title='🔎' />\n              <ListItem.Content>\n                <ListItem.Title>\n                  <Text\n                    onPress={() =>\n                      Linking.openURL(chainExplorer[key].address(addr))\n                    }\n                  >\n                    {chainExplorer[key].name}\n                  </Text>\n                </ListItem.Title>\n              </ListItem.Content>\n            </ListItem>\n          ))}\n      </>\n    )\n  }\n  if (isTx) {\n    const explorers = Object.keys(chainExplorer)\n    return (\n      <>\n        {explorers &&\n          explorers.map((key) => (\n            <ListItem key={chainExplorer[key].name}>\n              <Avatar rounded title='🔎' />\n              <ListItem.Content>\n                <ListItem.Title>\n                  <Text\n                    onPress={() => Linking.openURL(chainExplorer[key].tx(addr))}\n                  >\n                    {chainExplorer[key].name}\n                  </Text>\n                </ListItem.Title>\n              </ListItem.Content>\n              <ListItem.Chevron />\n            </ListItem>\n          ))}\n      </>\n    )\n  }\n  return <H3>Invalid Address</H3>\n}\n\nexport const Explorers = ({ chainId, term }) => {\n  return (\n    <>\n      {/* <Card>\n      <Card.Title>🔎 {CHAIN_MAP[chainId]} Chain Explorer</Card.Title> */}\n      <Card.Divider />\n      <AddrTx term={term} chainId={chainId} />\n      {/* </Card> */}\n    </>\n  )\n}\n\nexport default Explorers\n","import React from 'react'\nimport { Avatar, Card, ListItem, Text } from 'react-native-elements'\nimport { useEthscanBalance, useEthscanTokensBalance } from 'staker-hooks'\n\nimport { CHAIN_MAP } from 'helpers/constants'\nimport { Explorers } from 'components/Explorers'\n\nexport const EthScanBalance = ({ chainId, term }) => {\n  const addresses = [term]\n  const [nativeLoading, nativeBalance] = useEthscanBalance(addresses, chainId)\n  const [tokenLoading, tokenBalance] = useEthscanTokensBalance(\n    addresses,\n    chainId\n  )\n  // console.count('balance')\n  // console.log('>>>', chainId, nativeLoading, tokenLoading)\n\n  if (nativeLoading || tokenLoading) {\n    return (\n      <Card>\n        <Card.Title>💰 {CHAIN_MAP[chainId]} Balance</Card.Title>\n        <Card.Divider />\n        <ListItem>\n          <Text>Loading</Text>\n        </ListItem>\n      </Card>\n    )\n  }\n\n  const balance = [...nativeBalance, ...tokenBalance]\n\n  return (\n    <Card>\n      <Card.Title>💰 {CHAIN_MAP[chainId]} Balance</Card.Title>\n      <Card.Divider />\n      {balance.length > 0 &&\n        balance.map((token) => (\n          <ListItem key={token.token}>\n            <Text>\n              {token.token.padEnd(20, ' ​')}\n              {token.balance}\n            </Text>\n          </ListItem>\n        ))}\n      <Explorers chainId={chainId} term={term} />\n    </Card>\n  )\n}\n\nexport default EthScanBalance\n","export const baseFetchOptions = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n}\n\nexport const jsonRpcFetch = (fetch, node, body) =>\n  fetch(node, {\n    ...baseFetchOptions,\n    body,\n  }).then((response) => response.json())\n","// ==== zkSync JSON RPC ===\n// https://zksync.io/api/v0.1.html\n\nlet idx = 1\n\nexport const rpcTokens = JSON.stringify({\n  jsonrpc: '2.0',\n  id: idx++,\n  method: 'tokens',\n  params: [],\n})\n\nexport const rpcZkSyncBalance = (address) =>\n  JSON.stringify({\n    jsonrpc: '2.0',\n    id: idx++,\n    method: 'account_info',\n    params: [address],\n  })\n","import React, { useEffect, useState } from 'react'\nimport { Card, ListItem, Text } from 'react-native-elements'\n\nimport { CHAIN_MAP } from 'helpers/constants'\nimport { jsonRpcFetch } from 'helpers/jsonRpc'\nimport { Explorers } from 'components/Explorers'\n\nimport { rpcTokens, rpcZkSyncBalance } from './rpc'\n\nexport const ZkSyncBalance = ({ chainId, term }) => {\n  const [balance, setBalance] = useState([])\n  const data = []\n  useEffect(() => {\n    async function fetchZksyncBalance() {\n      const addresses = [term]\n      const nodeUrl = 'https://api.zksync.io/jsrpc'\n\n      const tokenJson = await jsonRpcFetch(fetch, nodeUrl, rpcTokens)\n      const tokenMap = tokenJson.result\n\n      for (let i = 0; i < addresses.length; i++) {\n        const json = await jsonRpcFetch(\n          fetch,\n          nodeUrl,\n          rpcZkSyncBalance(addresses[i])\n        )\n        const balances = json.result?.committed?.balances || {}\n        if (Object.keys(balances).length > 0) {\n          Object.entries(balances).forEach(([sym, balance]) => {\n            data.push({\n              // address: addresses[i],\n              token: sym,\n              balance: (Number(balance) / 10 ** tokenMap[sym].decimals).toFixed(\n                4\n              ),\n              source: '',\n            })\n          })\n        }\n      }\n\n      setBalance(data)\n    }\n\n    term && fetchZksyncBalance()\n  }, [term])\n\n  return (\n    <Card>\n      <Card.Title>💰 {CHAIN_MAP[chainId]} Balance</Card.Title>\n      <Card.Divider />\n      {balance.length > 0 &&\n        balance.map((token) => (\n          <ListItem key={token.token}>\n            <Text>\n              {token.token.padEnd(20, ' ​')}\n              {token.balance}\n            </Text>\n          </ListItem>\n        ))}\n      <Explorers chainId={chainId} term={term} />\n    </Card>\n  )\n}\n\nexport default ZkSyncBalance\n","import React from 'react'\nimport { Card, ListItem, Text } from 'react-native-elements'\n\nexport const Placeholder = () => (\n  <Card>\n    <Card.Title>💰 Balance</Card.Title>\n    <Card.Divider />\n    <ListItem>\n      <Text>👷🏻‍♀️ Under Construction</Text>\n    </ListItem>\n  </Card>\n)\n\nexport default Placeholder\n","import React from 'react'\nimport {\n  CHAIN_ETHEREUM,\n  CHAIN_XDAI,\n  CHAIN_BSC,\n  L2_ZKSYNC,\n} from 'staker-freenodes'\n\nimport { isAddr } from 'helpers/address'\nimport { SUPPORT_CHAINS } from 'helpers/constants'\n// import { formatAddressBalances, generateBalanceQuery } from './Balance.helper'\nimport { EthScanBalance } from './EthScanBalance'\nimport { ZkSyncBalance } from './ZkSyncBalance'\nimport { Placeholder } from './Placeholder'\n\nexport const Balance = ({ chainId, term }) => {\n  const isValidQuery = isAddr(term) && SUPPORT_CHAINS.includes(chainId)\n  if (!isValidQuery) return null\n  // console.log('balance of', chainId)\n  switch (chainId) {\n    case CHAIN_ETHEREUM:\n    case CHAIN_XDAI:\n    case CHAIN_BSC:\n      return <EthScanBalance chainId={chainId} term={term} />\n    case L2_ZKSYNC:\n      return <ZkSyncBalance chainId={chainId} term={term} />\n    default:\n      return <Placeholder />\n  }\n}\n\nexport default Balance\n","import React, { useEffect, useState } from 'react'\n// import { Avatar, Card, ListItem, Text } from 'react-native-elements'\nimport {\n  GAS_ESTIMATOR_ETHEREUM as GAS_ESTIMATOR,\n  CHAIN_ETHEREUM,\n} from 'staker-freenodes'\n// import _upperCase from 'lodash/upperCase'\nimport { H3 } from '@expo/html-elements'\n\nexport const GasFee = ({ chainId = CHAIN_ETHEREUM }) => {\n  const [gasStat, setGasStat] = useState({})\n  useEffect(() => {\n    // if (chainId !== CHAIN_ETHEREUM) return\n    const estimator = GAS_ESTIMATOR.GASNOW\n    fetch(estimator.api)\n      .then((response) => response.json())\n      .then((json) => {\n        const data = estimator.processGasData(json)\n        setGasStat(data)\n      })\n  }, [chainId])\n\n  if (chainId !== CHAIN_ETHEREUM) return null\n\n  // return (\n  //   <Card>\n  //     <Card.Title>\n  //       ⛽️ Gas Fee (via {_upperCase(gasStat.source) || ''})\n  //     </Card.Title>\n  //     <Card.Divider />\n  //     <ListItem style={{ alignSelf: 'center' }}>\n  //       <Text style={{ fontSize: 32 }}>\n  //         🚀{gasStat.H} 🚘{gasStat.M} 🚲{gasStat.L}\n  //       </Text>\n  //       {/* <Text style={{ fontSize: 48 }}>🚘 {gasStat.M}</Text> */}\n  //     </ListItem>\n  //   </Card>\n  // )\n  return (\n    <H3>\n      🚀{gasStat.H} 🚘{gasStat.M} 🚲{gasStat.L}\n    </H3>\n  )\n}\n\nexport default GasFee\n","import React from 'react'\nimport { Text, Linking, View } from 'react-native'\nimport { Card, SocialIcon } from 'react-native-elements'\nimport { H4 } from '@expo/html-elements'\n\nexport const SupportUs = () => (\n  <Card>\n    <Text>Stakerwat.ch is rising funding in Gitcoin Grant 9.</Text>\n    <H4\n      style={{ color: 'blue', alignSelf: 'center' }}\n      onPress={() =>\n        Linking.openURL('https://gitcoin.co/grants/1664/stakerwatch')\n      }\n    >\n      Support Us Here\n    </H4>\n    <Card.Divider />\n    <View style={{ flexDirection: 'row-reverse' }}>\n      <SocialIcon\n        raised={false}\n        type='twitter'\n        onPress={() => Linking.openURL('https://twitter.com/stakerwatch')}\n        iconSize={16}\n      />\n      <SocialIcon\n        raised={false}\n        type='github'\n        onPress={() =>\n          Linking.openURL('https://github.com/gasolin/stakerwatch')\n        }\n        iconSize={16}\n      />\n    </View>\n  </Card>\n)\n\nexport default SupportUs\n","import React, { useEffect, useState } from 'react'\nimport { Avatar, Card, ListItem, Text } from 'react-native-elements'\nimport { getNodeURL, CHAIN_ETHEREUM } from 'staker-freenodes'\n\nimport { DeFiSDK } from 'defi-sdk'\nimport BN from 'bignumber.js'\n\nimport { isAddr } from 'helpers/address'\n// import { jsonStringify } from 'helpers/utils'\n\nfunction getNormalizedNumber(number, decimals) {\n  return new BN(number).dividedBy(new BN(10).pow(decimals))\n}\n\nexport const DefiBalances = ({ chainId, term }) => {\n  const isValidQuery = isAddr(term) && chainId === CHAIN_ETHEREUM\n  const [balanceOnProtocls, setBalance] = useState([])\n  useEffect(() => {\n    async function fetching() {\n      const defiSdk = new DeFiSDK(getNodeURL(chainId))\n      // TODO: multi selector\n      // const protocols = await defiSdk.getProtocolNames()\n      // console.log(jsonStringify(protocols))\n      const balances = await defiSdk.getProtocolBalances(term, [\n        'Aave',\n        'Aave V2',\n        'Aave V2 • Variable Debt',\n        'Aave V2 • Stable Debt',\n        'Aave • Staking',\n        'Aave • Uniswap Market',\n        'Uniswap V2',\n        'SushiSwap',\n        'SushiSwap • Staking',\n        '1inch Liquidity Protocol',\n        '1inch LP • Staking',\n      ])\n      setBalance(balances)\n    }\n    fetching()\n  }, [chainId, term])\n\n  if (!isValidQuery || balanceOnProtocls.length === 0) return null\n\n  return (\n    <Card>\n      {balanceOnProtocls.map((protocol) => {\n        return (\n          <>\n            <Card.Title key={protocol.metadata.name}>\n              {/* <Avatar\n                  size='small'\n                  source={{\n                    uri: protocol.metadata.logo,\n                  }}\n                /> */}\n              {protocol.metadata.name}\n            </Card.Title>\n            <Card.Divider />\n            {protocol.balances.length > 0 &&\n              protocol.balances.map((protocolBalances) => {\n                // Each adapter could either be an Asset or Debt on the protocol\n                return (\n                  <>\n                    {protocolBalances.balances.map((balance) => {\n                      // console.log(jsonStringify(balance))\n                      const position = {\n                        Token: balance.base.metadata.symbol,\n                        Balance: getNormalizedNumber(\n                          balance.base.balance.toString(),\n                          balance.base.metadata.decimals\n                        ).toString(),\n                      }\n\n                      // If asset is a derivative then there will be underlying assets\n                      if (balance.underlying.length > 0) {\n                        const underlying = []\n                        balance.underlying.forEach((asset) => {\n                          underlying.push({\n                            Component: asset.metadata.symbol,\n                            Amount: getNormalizedNumber(\n                              asset.balance.toString(),\n                              asset.metadata.decimals\n                            ).toString(),\n                          })\n                        })\n                        position.Underlying = underlying\n                      }\n                      // console.log('Position:', position)\n                      return (\n                        <ListItem key={position.Token}>\n                          <ListItem.Content>\n                            <ListItem.Title>\n                              {position.Token} {position.Balance}\n                            </ListItem.Title>\n                            <ListItem.Subtitle>\n                              {position.Underlying.map(\n                                (token) => `${token.Component} ${token.Amount}`\n                              ).join(' ')}\n                            </ListItem.Subtitle>\n                          </ListItem.Content>\n                        </ListItem>\n                      )\n                    })}\n                  </>\n                )\n              })}\n            <Card.Divider />\n          </>\n        )\n      })}\n      {/* <Text>{jsonStringify(balanceOnProtocls)}</Text> */}\n    </Card>\n  )\n}\n\nexport default DefiBalances\n","// import { StatusBar } from 'expo-status-bar'\nimport React from 'react'\nimport { StyleSheet, View, ScrollView, useWindowDimensions } from 'react-native'\nimport { H1, Header, Main, P, Footer } from '@expo/html-elements'\nimport { CHAIN_ETHEREUM } from 'staker-freenodes'\n\nimport { SearchBar } from 'components/SearchBar'\nimport { Balance } from 'components/Balance'\nimport { GasFee } from 'components/GasFee'\nimport { SupportUs } from 'components/SupportUs'\nimport { DefiBalances } from 'components/DefiBalances'\nimport useLocalStorage from 'hooks/useLocalStorage'\nimport { SUPPORT_CHAINS } from 'helpers/constants'\nimport { i18n } from 'helpers/i18n'\n\nconst bgColor = 'white'\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    backgroundColor: bgColor,\n    flex: 1,\n    justifyContent: 'center',\n  },\n})\n\nexport default function Root() {\n  const [term, onChangeSearchTerm] = useLocalStorage('addr', '')\n  const { width } = useWindowDimensions()\n  // TOOD: masonry layout\n  const isDesktop = width > 963\n  // const [chainIdx, onChangeChainIdx] = useLocalStorage('chainId', 0)\n  // const chainId = SUPPORT_CHAINS[chainIdx]\n  // const onSearch = () => {\n  //   console.log(term, chainId)\n  // }\n\n  return (\n    <View style={styles.container}>\n      <Header style={{ alignItems: 'center' }}>\n        <H1>{i18n.en.title}</H1>\n        <GasFee />\n      </Header>\n      <Main>\n        <SearchBar\n          // chainIdx={chainIdx}\n          // onChangeChainIdx={onChangeChainIdx}\n          term={term}\n          onChangeSearchTerm={onChangeSearchTerm}\n          // onSearch={onSearch}\n        />\n        <ScrollView horizontal={isDesktop}>\n          <View\n            style={\n              isDesktop\n                ? { flexDirection: 'row', width: width * 0.8 }\n                : { flexDirection: 'column' }\n            }\n          >\n            {SUPPORT_CHAINS.map((chainId, idx) => (\n              <Balance key={chainId} chainId={chainId} term={term} />\n            ))}\n            <DefiBalances chainId={CHAIN_ETHEREUM} term={term} />\n          </View>\n        </ScrollView>\n        <SupportUs />\n      </Main>\n      <Footer>\n        <P>{i18n.en.credit}</P>\n      </Footer>\n      {/* <StatusBar style=\"auto\" /> */}\n    </View>\n  )\n}\n","import React, { useState } from 'react'\n\n// https://usehooks.com/useLocalStorage/\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      // eslint-disable-next-line no-console\n      console.log(error)\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      // eslint-disable-next-line no-console\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n","import React from 'react'\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\n\nimport Dashboard from 'views/Dashboard'\n\nexport default function Root() {\n  return (\n    <SafeAreaProvider>\n      <Dashboard />\n    </SafeAreaProvider>\n  )\n}\n","import React from 'react'\nimport { version as nodesVersion } from 'staker-freenodes/package.json'\nimport { version as contractsVersion } from 'staker-contracts/package.json'\n\nimport Root from 'routes/Root'\nimport { version as webVersion } from './package.json'\n\nconst label = 'versions'\nconst App = () => {\n  /* eslint-disable */\n  console.log(\n    'commandline version is available, check https://www.npmjs.com/package/staker'\n  )\n  console.group(label);\n  console.log(`web v${webVersion}`)\n  console.log(`staker-freenodes v${nodesVersion}`)\n  console.log(`staker-contracts v${contractsVersion}`)\n  console.groupEnd(label);\n  /* eslint-enable */\n  return <Root />\n}\nexport default App\n"],"sourceRoot":""}