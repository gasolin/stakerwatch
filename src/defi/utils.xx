// https://github.com/MyCryptoHQ/eth-scan/blob/master/src/utils/abi.ts
import {decode as decodeAbi, encode as encodeAbi} from '@findeth/abi';

const HEXADECIMAL_CHARACTERS = '0123456789abcdef';

/**
 * Get the buffer as hexadecimal string, prefixed with 0x.
 *
 * @param {Buffer} buffer The buffer to encode.
 * @return {string} The hexadecimal string.
 */
 export const bufferToString = (buffer: Buffer | Uint8Array): string => {
  return new Uint8Array(buffer).reduce<string>((current, next) => {
    return current + HEXADECIMAL_CHARACTERS[next >> 4] + HEXADECIMAL_CHARACTERS[next & 15];
  }, '0x');
};


/**
 * Encode the addresses and an optional token to an input data string.
 *
 * @param {string[]} inputs An array of inputs.
 * @param {...any[]} data The arguments as defined by the types.
 * @return {string} The input data formatted as hexadecimal string.
 */
 export const encode = (inputs, ...data) => {
  return bufferToString(encodeAbi(inputs, data));
};

/**
 * Encode the addresses and an optional token to an input data string with the function identifier.
 *
 * @param {string} id The function identifier as a hexadecimal string.
 * @param {string[]} types An array of inputs.
 * @param {...any[]} data The arguments as defined by the types.
 * @return {string} The input data as a hexadecimal string.
 */
 export const encodeWithId = (id, types, ...data) => {
  return `0x${id}${encode(types, ...data).slice(2)}`;
};
